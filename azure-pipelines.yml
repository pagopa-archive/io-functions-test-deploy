# Azure DevOps pipeline to release a new version and deploy to production.

variables:
  NODE_VERSION: '10.14.1'
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn

parameters:
  - name: 'RELEASE_SEMVER'
    displayName: 'When packing a release, define the version bump to apply'
    type: string
    values:
      - major
      - minor
      - patch
    default: minor
  - name: 'PRODUCTION_APPS'
    displayName: ''
    type: object
    default:
      fns3_app1:
        appname: io-d-fn3-tdeploy
        rg: io-d-rg-tdeploy
      fns3_app2:
        appname: io-d-fn3-tdeploy2
        rg: io-d-rg-tdeploy

# Only manual activations are intended
trigger: none

# This pipeline has been implemented to be run on hosted agent pools based both
# on 'windows' and 'ubuntu' virtual machine images and using the scripts defined
# in the package.json file. Since we are deploying on Azure functions on Windows
# runtime, the pipeline is currently configured to use a Windows hosted image for
# the build and deploy.
pool:
  vmImage: 'windows-2019'

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v4
      endpoint: 'pagopa'

stages:
  - stage: Wait
    jobs:  
    - job: waitForValidation
      displayName: Wait for external validation  
      pool: server    
      timeoutInMinutes: 4320 # job times out in 3 days
      steps:   
      - task: ManualValidation@0
        timeoutInMinutes: 1440 # task times out in 1 day
        inputs:
          notifyUsers: |
            emanuele.decupis@pagopa.it
          instructions: 'Please validate the build configuration and resume'
          onTimeout: 'resume'


  # Prepare Artifact
  - stage: Prepare_artifact
    dependsOn:
      - Wait
    jobs:
      - job: 'prepare_artifact'
        steps:
          # Build application
          - template: azure-templates/setup-project.yml
          - script: |
              yarn predeploy
            displayName: 'Build'

          # Install functions extensions
          - task: DotNetCoreCLI@2
            inputs:
              command: "build"
              arguments: "-o bin"   
          # Copy application to  
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)'
              TargetFolder: '$(System.DefaultWorkingDirectory)/bundle'
              Contents: |
                **/*
                !.git/**/*
                !**/*.js.map
                !**/*.ts
                !.vscode/**/*
                !.devops/**/*
                !.prettierrc
                !.gitignore
                !README.md
                !jest.config.js
                !local.settings.json
                !test
                !tsconfig.json
                !tslint.json
                !yarn.lock
                !Dangerfile.js
                !CODEOWNERS
                !__*/**/*
            displayName: 'Copy deploy files'

          - script: |
              ls $(System.DefaultWorkingDirectory)/bundle
            displayName: 'ls System.DefaultWorkingDirectory/bundle'
          - script: |
              ls $(System.DefaultWorkingDirectory)
            displayName: 'ls System.DefaultWorkingDirectory<'
          
          - publish: $(System.DefaultWorkingDirectory)/bundle
            artifact: Bundle

  # Deploy on staging slot
  - ${{ each app in parameters.PRODUCTION_APPS }}:
    - stage: Deploy_staging_${{ app.Key }}
      dependsOn:
        - Prepare_artifact
      jobs:
        - job: 'do_deploy_${{ app.Key }}'
          steps:
            - checkout: none
            - download: current
              artifact: Bundle
            
            - script: |
                ls $(Pipeline.Workspace)/Bundle
              displayName: 'ls'
              
            - task: AzureFunctionApp@1  
              inputs:
                azureSubscription: '$(PRODUCTION_AZURE_SUBSCRIPTION)'
                resourceGroupName: '${{ app.Value.rg }}'
                appType: 'functionApp'
                appName: '${{ app.Value.appname }}'
                package: '$(Pipeline.Workspace)/Bundle'
                deploymentMethod: 'auto'
                deployToSlotOrASE: true
                slotName: 'staging'
              displayName: Deploy to ${{ app.Key }} staging slot 

  # Check that the staging instance is healthy
  - ${{ each app in parameters.PRODUCTION_APPS }}:
    - stage: Healthcheck_${{ app.Key }}
      dependsOn:
        - Deploy_staging_${{ app.Key }}
      jobs:
        - job: 'do_healthcheck_${{ app.Key }}'       
          steps:  
            - checkout: none
            - template: templates/rest-healthcheck/template.yaml@pagopaCommons 
              parameters:
                azureSubscription: '$(PRODUCTION_AZURE_SUBSCRIPTION)'
                appName: '${{ app.Value.appname }}'
                endpoint: 'https://${{ app.Value.appname }}-staging.azurewebsites.net/info'
                endpointType: 'private'
                containerInstanceResourceGroup: 'io-d-rg-tdeploy'
                containerInstanceVNet: 'io-d-vnet-tdeploy'
                containerInstanceSubnet: 'azure-devops' 

  # Promote the staging instance to production
  - ${{ each app in parameters.PRODUCTION_APPS }}:
    - stage: Swap_to_production_${{ app.Key }}
      dependsOn:
        - ${{ each app2 in parameters.PRODUCTION_APPS }}:
          - Healthcheck_${{ app2.Key }} # every healthcheck is good
          - Deploy_staging_${{ app.Key }}
      jobs:
        - job: 'do_deploy_${{ app.Key }}'       
          steps:  
            - checkout: none
            - task: AzureAppServiceManage@0
              inputs:
                azureSubscription: '$(PRODUCTION_AZURE_SUBSCRIPTION)'
                resourceGroupName: '${{ app.Value.rg }}'
                webAppName: '${{ app.Value.appname }}'
                sourceSlot: staging
                swapWithProduction: true
              displayName: Swap with ${{ app.Key }} production slot
